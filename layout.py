from datetime import date
from dialog_window import app, url_start
from items_data import fig_activity, gender_list, most_popular_post, age_list, fig_dynamic, list_items, err_mean, ar_mean
from datetime import datetime, timedelta
import plotly.express as px
from dash import html, dcc
import plotly.graph_objects as go
from dash.dependencies import Input, Output, State
from dialog_window import access_token
from get_data import fetch_vk_stats, id_group, df
from items_data import df_activity, df_dynamic, calculate_err_mean, get_text_advice_err, calculate_ar_mean, \
    get_text_advice_ar, get_sex, get_age, find_most_popular_post, top_5_age_sex_category
from strings import text_err, text_ar, text_target_audience


app_layout = html.Div([
    html.Div([

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        html.Div([

            # –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
            html.Div([
                html.P(['–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                       className='link_header',
                       style={'font-style': 'bold', 'font-size': '26px', 'margin-bottom': '10px', 'color': '#090447'}),

                html.Div([
                    html.Div(url_start, id='link_display',
                             style={'width': '95%', 'padding': '10px', 'font-size': '18px', 'border-radius': '10px',
                                    'border': '1px solid #ccc', 'color': '#fff'}),
                    html.Button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', id='copy_link_button',
                                    style={'font-size': '10px', 'width': 'wrap-content', 'margin-left': '10px', 'border-radius': '10px', 'cursor': 'pointer',
                                           'background-color': '#39344a', 'color': '#fff'}),
                    dcc.Clipboard(target_id="token_display", style={"display": "none"})
                ], style={'margin-bottom': '6px', 'display': 'flex', 'flex-direction': 'row',
                          'justify-content': 'spread-inside'}),
            ], className='row',
                style={'display': 'flex', 'flex-direction': 'column', 'margin-bottom': '10px',
                       'border-radius': '20px'}),

            # –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (—Å –∫–Ω–æ–ø–∫–æ–π)
            html.Div([
                html.P(['–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–≤–µ–ª–∏'],
                       className='token_header',
                       style={'font-style': 'bold', 'font-size': '26px', 'margin-bottom': '10px', 'color': '#090447'}),
                html.Div([
                    html.Div('*****', id='token_display',
                             style={'width': '95%', 'padding': '10px', 'font-size': '18px', 'border-radius': '10px',
                                    'border': '1px solid #ccc', 'color': '#fff',
                                    'overflow': 'hidden', 'white-space': 'nowrap', 'text-overflow': 'ellipsis'}),
                    html.Button('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω', id='copy_token_button',
                                style={'font-size': '10px', 'width': 'wrap-content', 'margin-left': '10px', 'border-radius': '10px', 'cursor': 'pointer',
                                       'background-color': '#39344a', 'color': '#fff'}),
                    dcc.Clipboard(target_id="token_display", style={"display": "none"})
                ], style={'margin-bottom': '6px', 'display': 'flex', 'flex-direction': 'row',
                          'justify-content': 'spread-inside'}),
                html.Button('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω', id='show_token_button', n_clicks=0,
                            style={"padding": "10px", "border-radius": "10px", "cursor": "pointer",
                                   'background-color': '#39344a', 'color': '#fff'})
            ], className='row', style={'display': 'flex', 'flex-direction': 'column', 'border-radius': '20px'}),
        ], className='fields_container', style={'grid-column': 'span 6'}),


        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
        html.Div([
            html.P(['–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                       className='link_header',
                       style={'font-style': 'bold', 'font-size': '26px', 'margin-bottom': '10px', 'color': '#090447'}),

            # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
            dcc.RadioItems(
                id='radio-items',
                options=[
                    {'label': '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥', 'value': 'all_time'},
                    {'label': '–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è', 'value': 'last_week'},
                    {'label': '–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü', 'value': 'last_month'},
                    {'label': '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É', 'value': 'custom_date'},
                ],
                value='all_time',
                inputClassName='radio-item-container',
                style={'margin-bottom': '20px'}
            ),

            # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            html.Div(
                id='date-picker-div',
                style={'display': 'none'},
                children=[
                dcc.DatePickerRange(
                    id='date-picker-range',
                    start_date=date.today(),
                    end_date_placeholder_text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!'
                )
            ]),

            html.Div(
                id='output-dates',
                children=[],
                style={'display': 'none'}
            )
        ],
        className='date_container', style={'grid-column': 'span 6'}),

        # –ì—Ä–∞—Ñ–∏–∫ users_activity
        html.Div([
            dcc.Graph(
                id="users_activity",
                figure=fig_activity,
                className='dcc_compon'
            )
        ], style={'grid-column': 'span 6', 'border-radius': '5px', 'background-color': '#39344a', 'padding': '10px'}),

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ú/–ñ
        html.Div([
            dcc.Graph(
                id="gender-graph",
                figure=px.pie(
                    values=gender_list,
                    labels=['Male', 'Female'],
                    title='–ü–æ–ª'
                ).update_traces(insidetextorientation='radial'),
                className='dcc_compon'
            )
        ], id='gender',
            style={'grid-column': 'span 3', 'padding': '10px', 'border-radius': '5px', 'background-color': '#39344a'}),

        # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç
        html.Div([
            html.P('–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç', style={'color': '#FFFFFF', 'fontWeight': 'bold', 'fontSize': '20px'}),
            html.Img(src=most_popular_post['Photo'], style={'max-width': '100%', 'border-radius': '5px'}),
            html.P(most_popular_post['Text'], style={'color': '#FFFFFF', 'margin-top': '10px'}),
            html.P(
                f"üëç {most_popular_post['Likes']}   üí¨ {most_popular_post['Comments']}   üëÄ {most_popular_post['Views']}   üîÑ {most_popular_post['Reposts']}",
                style={'color': '#FFFFFF', 'margin-top': '10px'}),
            html.A('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç', href=most_popular_post['URL'], target='_blank',
                   style={'color': '#1DA1F2', 'margin-top': '10px', 'textDecoration': 'none'})
        ], id='post',
            className='post-container',
            style={'background-color': '#39344a', 'border-radius': '5px', 'grid-column': 'span 3',
                   'display': 'flex', 'flex-direction': 'column', 'align-items': 'center', 'padding': '20px'}),

        # –ì—Ä–∞—Ñ–∏–∫ users_dynamic
        html.Div([
            dcc.Graph(
                id="users_dynamic",
                figure=fig_dynamic,
                className='dcc_compon'
            )
        ], style={'grid-column': 'span 6', 'border-radius': '5px', 'background-color': '#39344a', 'padding': '10px'}),

        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–æ–∑—Ä–∞—Å—Ç
        html.Div([
            dcc.Graph(
                id="age-graph",
                figure=px.pie(
                    values=age_list,
                    names=['12-21', '21-27', '27-30', '30-45', '45-100'],
                    title='–í–æ–∑—Ä–∞—Å—Ç'
                ),
                className='dcc_compon'
            )
        ], id='age',
            style={'grid-column': 'span 3', 'padding': '10px', 'border-radius': '5px', 'background-color': '#39344a'}),

        # –¢–æ–ø —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        html.Div([
            html.P("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏", style={'color': '#FFFFFF', 'fontWeight': 'bold'}),
            html.P(text_target_audience, style={'color': '#f9f9f9', 'font-size': '16px'}),
            html.Ol(
                children=dcc.Markdown(list_items, dangerously_allow_html=True)
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–∫ HTML
            )
        ], id ='target_audience', className='text-container',
            style={'background-color': '#39344a', 'border-radius': '5px', 'grid-column': 'span 3',
                   'display': 'flex', 'flex-direction': 'column', 'padding': '20px'}),

        # ERR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        html.Div([
            html.P('ERR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'),
            html.P(err_mean),
            html.P(text_err),
            html.P('–°–æ–≤–µ—Ç—ã:'),
            html.P(get_text_advice_err(err_mean))
        ], id='ERR',
            className='text-container',
            style={'background-color': '#39344a', 'border-radius': '5px', 'grid-column': 'span 6',
                   'display': 'flex', 'flex-direction': 'column', 'padding': '20px'}),

        # AR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        html.Div([
            html.P('AR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞'),
            html.P(text_ar),
            html.P('–°–æ–≤–µ—Ç—ã:'),
            html.P(get_text_advice_ar(ar_mean))
        ], id='AR',
            className='text-container',
            style={'background-color': '#39344a', 'padding': '20px', 'border-radius': '5px', 'grid-column': 'span 6',
                   'display': 'flex', 'flex-direction': 'column'}),

    ],
        className='grid-container',
        style={'background-color': '#8459822', 'display': 'grid', 'grid-template-columns': 'repeat(12, 1fr)',
               'grid-gap': '20px', 'padding': '20px'})

], style={'background-color': '#8284bd', 'width': '100%'})


@app.callback(
        Output('token_display', 'children'),
        Output('show_token_button', 'children'),
        [Input('show_token_button', 'n_clicks')],
    )
def toggle_token(n_clicks):
    if n_clicks % 2 == 0:
        return '******', '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω'
    else:
        return access_token, '–°–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω'


# –û—Ç–∫—Ä—ã—Ç–∏–µ custom_date –ø–æ–ª—è
@app.callback(
    Output('date-picker-div', 'style'),
    Input('radio-items', 'value')
)
def toggle_date_picker(selected_value):
    if selected_value == 'custom_date':
        return {'display': 'block'}
    else:
        return {'display': 'none'}


# Output_dates (–¥–∞—Ç—ã –∏–∑ custom_dates)
@app.callback(
    Output('output-dates', 'children'),
    [Input('date-picker-range', 'start_date'),
    Input('date-picker-range', 'end_date')]
)
def update_output(start_date, end_date):
    if start_date and end_date:

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç UNIX
        start_time = int(datetime.fromisoformat(start_date).timestamp())
        end_time = int(datetime.fromisoformat(end_date).timestamp())

        return f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç {start_time} –¥–æ {end_time}'
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç'


# Users_activity & Users_dynamic
@app.callback(
    [Output('users_activity', 'figure'),
     Output('users_dynamic', 'figure')],
    [Input('radio-items', 'value'),
     Input('date-picker-range', 'start_date'),
     Input('date-picker-range', 'end_date')]
)
def update_graph(selected_period, start_date, end_date):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
    start_time = None
    end_time = None

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if selected_period == 'last_week':
        start_time = int((datetime.now() - timedelta(days=7)).timestamp())
        end_time = int(datetime.now().timestamp())
    elif selected_period == 'last_month':
        start_time = int((datetime.now() - timedelta(days=30)).timestamp())
        end_time = int(datetime.now().timestamp())
    elif selected_period == 'all_time':
        start_time = 1709286555
        end_time = int(datetime.now().timestamp())
    elif selected_period == 'custom_date' and start_date and end_date:
        start_time = int(datetime.fromisoformat(start_date).timestamp())
        end_time = int(datetime.fromisoformat(end_date).timestamp())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if start_time is None or end_time is None:
        return go.Figure(), go.Figure()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º
    filtered_df_activity = df_activity[(df_activity['Unix'] >= start_time) & (df_activity['Unix'] <= end_time)]
    filtered_df_dynamic = df_dynamic[(df_dynamic['Unix'] >= start_time) & (df_dynamic['Unix'] <= end_time)]

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig_activity = go.Figure()
    fig_activity.add_trace(
        go.Scatter(x=filtered_df_activity['Date'], y=filtered_df_activity['Likes'], mode='lines+markers', name='–õ–∞–π–∫–∏'))
    fig_activity.add_trace(
        go.Scatter(x=filtered_df_activity['Date'], y=filtered_df_activity['Comments'], mode='lines+markers', name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'))
    fig_activity.add_trace(
        go.Scatter(x=filtered_df_activity['Date'], y=filtered_df_activity['Reposts'], mode='lines+markers', name='–†–µ–ø–æ—Å—Ç—ã'))

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig_activity.update_layout(title='A–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', xaxis_title='–î–∞—Ç–∞', yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    fig_activity.update_layout(plot_bgcolor='#39344a', paper_bgcolor='#39344a', font_color='#cbc2b9')

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig_dynamic = go.Figure()
    fig_dynamic.add_trace(go.Scatter(x=filtered_df_dynamic['Date'], y=filtered_df_dynamic['Reach subscribers'], mode='lines+markers', name='–û—Ö–≤–∞—Ç—ã –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º'))
    fig_dynamic.add_trace(go.Scatter(x=filtered_df_dynamic['Date'], y=filtered_df_dynamic['Reach unique'], mode='lines+markers', name='–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ö–≤–∞—Ç—ã'))

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    fig_dynamic.update_layout(title='–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ö–≤–∞—Ç–æ–≤', xaxis_title='–î–∞—Ç–∞', yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    fig_dynamic.update_layout(plot_bgcolor='#39344a', paper_bgcolor='#39344a', font_color='#cbc2b9')

    return fig_activity, fig_dynamic


#ERR, AR, gender & age pie graphs, most popular post
@app.callback(
    [Output('ERR', 'children'),
     Output('AR', 'children'),
     Output('gender-graph', 'figure'),
     Output('age-graph', 'figure'),
     Output('post', 'children'),
     Output('target_audience', 'children')],
    [Input('radio-items', 'value'),
     Input('date-picker-range', 'start_date'),
     Input('date-picker-range', 'end_date')]
)
def update_graph(selected_period, start_date, end_date):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        start_time_selected = None
        end_time_selected = None
        if selected_period == 'last_week':
            start_time_selected = int((datetime.now() - timedelta(days=7)).timestamp())
            end_time_selected = int(datetime.now().timestamp())
        elif selected_period == 'last_month':
            start_time_selected = int((datetime.now() - timedelta(days=30)).timestamp())
            end_time_selected = int(datetime.now().timestamp())
        elif selected_period == 'all_time':
            start_time_selected = 1709286555
            end_time_selected = int(datetime.now().timestamp())
        elif selected_period == 'custom_date' and start_date and end_date:
            start_time_selected = int(datetime.fromisoformat(start_date).timestamp())
            end_time_selected = int(datetime.fromisoformat(end_date).timestamp())

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        data = fetch_vk_stats(start_time_selected, end_time_selected, access_token, id_group)

        # –°–æ–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ERR & AR
        likes_selected, copies_selected, comment_selected, reach_selected = data[0], data[1], data[3], data[6]

        # –û–±–Ω–æ–≤–ª—è–µ–º ERR
        err_mean_updated = calculate_err_mean(likes_selected, copies_selected, comment_selected, reach_selected)
        text_advice_err_updated = get_text_advice_err(err_mean_updated)

        # –û–±–Ω–æ–≤–ª—è–µ–º AR
        ar_mean_updated = calculate_ar_mean(copies_selected, reach_selected)
        text_advice_ar_updated = get_text_advice_ar(ar_mean_updated)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è gender
        sex_df_selected = data[9]
        gender_list_updated = list(get_sex(sex_df_selected))

        # –û–±–Ω–æ–≤–ª—è–µ–º pie chart –¥–ª—è gender
        gender_pie_updated = px.pie(
            values=gender_list_updated,
            names=['Male', 'Female'],
            title='–ü–æ–ª'
        ).update_layout(
            legend_orientation='h',
            title_x=0.5,
            plot_bgcolor='#39344a',
            paper_bgcolor='#39344a',
            font_color='#cbc2b9'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è age
        age_df_selected = data[10]
        age_list_updated = list(get_age(age_df_selected))

        # –û–±–Ω–æ–≤–ª—è–µ–º pie chart –¥–ª—è age
        age_pie_updated = px.pie(
            values=age_list_updated,
            names=['12-21', '21-27', '27-30', '30-45', '45-100'],
            title='–í–æ–∑—Ä–∞—Å—Ç'
        ).update_layout(
            legend_orientation='h',
            title_x=0.5,
            plot_bgcolor='#39344a',
            paper_bgcolor='#39344a',
            font_color='#cbc2b9'
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç
        most_popular_post_updated = find_most_popular_post(df, start_time_selected, end_time_selected, like_weight=0.5, view_weight=0.3, comment_weight=0.2)
        post_card_updated = [
            html.P('–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç', style={'color': '#FFFFFF', 'fontWeight': 'bold', 'fontSize': '20px'}),
            html.Img(src=most_popular_post_updated['Photo'], style={'max-width': '100%', 'border-radius': '5px'}),
            html.P(most_popular_post_updated['Text'], style={'color': '#FFFFFF', 'margin-top': '10px'}),
            html.P(
                f"üëç {most_popular_post_updated['Likes']}   üí¨ {most_popular_post_updated['Comments']}   üëÄ {most_popular_post_updated['Views']}   üîÑ {most_popular_post_updated['Reposts']}",
                style={'color': '#FFFFFF', 'margin-top': '10px'}
            ),
            html.A('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç', href=most_popular_post_updated['URL'], target='_blank',
                   style={'color': '#1DA1F2', 'margin-top': '10px', 'textDecoration': 'none'})
        ]
        #–û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        age_sex_df_selected = data[11]
        top_5_updated = top_5_age_sex_category(age_sex_df_selected)
        list_items_updated = ""
        for entry in top_5_updated:
            list_items_updated += f"<li style='color: #f9f9f9; font-size: 16px;'>{entry[0]} - {entry[1]:.3f}%</li>\n"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ERR, gender pie chart, age pie chart, —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        return ([
            html.P('ERR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                    style={'color': '#f9f9f9',
                           'font-size': '24px',
                           'font-weight': 'bold',
                           'font-family': 'Montserrat.ttf',
                           'mardin-bottom': '5px',
                           'text-align': 'center'}
                   ),
            html.P(err_mean_updated,
                   style={'color': '#f1986c',
                          'font-size': '34px',
                          'font-weight': 'bold',
                          'mardin-top': '5px',
                          'text-align': 'center'}
                   ),
            html.P(text_err,
                   style={'color': '#f9f9f9',
                          'font-size': '12px'}
                   ),
            html.P('–°–æ–≤–µ—Ç—ã:',
                   style={'color': '#f9f9f9',
                          'font-size': '20px',
                          'font-weight': 'bold'}
                   ),

            html.P(text_advice_err_updated,
                   style={'color': '#f9f9f9', 'font-size': '12px'}),

            html.P(
                """–û–¥–Ω–∞–∫–æ –æ–±—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±—ã–≤–∞—é—Ç –æ–±–º–∞–Ω—á–∏–≤—ã, –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ü–µ–Ω–∏—Ç—å
                –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å ER –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥.""",
                   style={'color': '#f9f9f9', 'font-size': '12px'}),
            html.P(
                "–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è ERR:",
                   style={'color': '#f9f9f9', 'font-size': '12px'}),
            html.Ul([
                html.Li(
                    "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã: —ç—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.",
                        style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–í–≤–æ–¥–∏—Ç–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã —É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ª—é–¥–µ–π –∏ –ø—Ä–æ–¥–ª–µ–≤–∞—é—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –æ–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: –æ–Ω–∏ —Ö–æ—Ä–æ—à–æ –≤–æ–≤–ª–µ–∫–∞—é—Ç.",
                        style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–û–±—â–∞–π—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ç–∞–∫ –ª—é–¥–∏ –±—É–¥—É—Ç –≤—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –≤ –æ–±—â–µ–Ω–∏–µ —Å –±—Ä–µ–Ω–¥–æ–º.",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–∑—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                        style={'color': '#f9f9f9', 'font-size': '12px'}),
            ])
        ],
        [
            html.P('AR —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                   style={'color': '#f9f9f9',
                          'font-size': '24px',
                          'font-weight': 'bold',
                          'font-family': 'Montserrat.ttf',
                          'mardin-bottom': '5px',
                          'text-align': 'center'}
                   ),
            html.P(ar_mean_updated,
                   style={'color': '#f1986c',
                          'font-size': '34px',
                          'font-weight': 'bold',
                          'mardin-top': '5px',
                          'text-align': 'center'}
                   ),
            html.P(text_ar,
                   style={'color': '#f9f9f9',
                          'font-size': '12px'}
                   ),
            html.P('–°–æ–≤–µ—Ç—ã:',
                   style={'color': '#f9f9f9',
                          'font-size': '20px',
                          'font-weight': 'bold'}
                   ),

            html.P(text_advice_ar_updated,
                   style={'color': '#f9f9f9', 'font-size': '12px'}),

            html.P(
                """–û–¥–Ω–∞–∫–æ –æ–±—â–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –±—ã–≤–∞—é—Ç –æ–±–º–∞–Ω—á–∏–≤—ã, –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ü–µ–Ω–∏—Ç—å
                –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å AR –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥.""",
                style={'color': '#f9f9f9', 'font-size': '12px'}),
            html.P(
                "–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è AR:",
                style={'color': '#f9f9f9', 'font-size': '12px'}),
            html.Ul([
                html.Li(
                    "–†–∞–∑–º–µ—â–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤. –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å: –≤—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å. ",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–ü—É–±–ª–∏–∫—É–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ß–µ—Ä–µ–¥—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º–∏ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏.",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–î–æ–±–∞–≤–ª—è–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Ñ–æ—Ä–º–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–ø–æ—Å—Ç—è—Ç —á–∞—â–µ –¥—Ä—É–≥–∏—Ö (—á–µ–∫-–ª–∏—Å—Ç—ã, –≥–∞–π–¥—ã, –ø–æ–¥–±–æ—Ä–∫–∏, –∫–∞—Ä—Ç–æ—á–∫–∏). –£—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. ",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ª—è—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ, –≤ –∫–∞–∫–æ–º –∫–ª—é—á–µ –ø–æ–¥–∞–Ω—ã —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã, –≤ –∫–∞–∫–æ–º —Å—Ç–∏–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ç–µ–∫—Å—Ç—ã –∏ –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ–ª–ª–∞–∂–∏ –∏–ª–∏ –º–µ–º—ã.",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
                html.Li(
                    "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤. –ö –ø—Ä–∏–º–µ—Ä—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª –ø—Ä–æ—è–≤–ª—è—é—Ç —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å 8:00 –¥–æ 10:00 (–≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –∫ —É—á–µ–±–µ –∏ —Ä–∞–±–æ—Ç–µ, –æ–Ω–∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—á–∏—Ç–∞—é—Ç –ª–µ–≥–∫–∏–µ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã). –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Å 12:00 –¥–æ 15:00 (—Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –æ–±–∑–æ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π). –í—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ ‚Äî —Å 21:00 –¥–æ 23:00. –î–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö, –Ω–æ–≤–æ—Å—Ç—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏.",
                    style={'color': '#f9f9f9', 'font-size': '12px'}),
            ])
        ], gender_pie_updated, age_pie_updated, post_card_updated,
                [
                    html.P("–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏", style={'color': '#FFFFFF', 'fontWeight': 'bold'}),
                    html.P(text_target_audience, style={'color': '#f9f9f9', 'font-size': '16px'}),
                    html.Ol(children=dcc.Markdown(list_items_updated, dangerously_allow_html=True))
                ]
        )

